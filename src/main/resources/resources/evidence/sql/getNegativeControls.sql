/*********************************************
Define The Concepts of Interest
**********************************************/
IF OBJECT_ID('tempdb..#CONCEPTS_OF_INTEREST', 'U') IS NOT NULL
	DROP TABLE #CONCEPTS_OF_INTEREST;

SELECT DISTINCT 
	CONCEPT_ID COI_CONCEPT_ID
	, CONCEPT_NAME COI_CONCEPT_NAME
INTO #CONCEPTS_OF_INTEREST
FROM @tableQualifier.CONCEPT c
WHERE c.CONCEPT_ID IN (
	@CONCEPT_IDS
)
ORDER BY CONCEPT_ID;

/*********************************************
Create a Complete Universe
**********************************************/
IF OBJECT_ID('tempdb..#COMPLETE_UNIVERSE', 'U') IS NOT NULL
	DROP TABLE #COMPLETE_UNIVERSE;

WITH CTE_TOTAL_UNIVERSE AS
(
	SELECT DISTINCT 0 AS CONDITION_CONCEPT_ID,
			CAST('@CONCEPT_SET_NAME' AS VARCHAR(1000)) CONDITION_CONCEPT_NAME,
			INGREDIENT_CONCEPT_ID DRUG_CONCEPT_ID,
			INGREDIENT_CONCEPT_NAME DRUG_CONCEPT_NAME,
			'DRUG' domain_id
	FROM @tableQualifier.DRUG_UNIVERSE /*this table is created as part of the main anaylsis*/
	UNION 
	SELECT DISTINCT CONDITION_CONCEPT_ID,
                        CONDITION_CONCEPT_NAME CONCEPT_NAME,
                        0 AS DRUG_CONCEPT_ID,
			CAST('@CONCEPT_SET_NAME' AS VARCHAR(1000)) DRUG_CONCEPT_NAME,
			'CONDITION' domain_id
	FROM @tableQualifier.CONDITION_UNIVERSE /*this table is created as part of the main anaylsis*/
)
SELECT * 
INTO #COMPLETE_UNIVERSE
FROM CTE_TOTAL_UNIVERSE
WHERE domain_id = '@TARGET_DOMAIN_ID'
;

/*********************************************
Summarize the Evidence that Does Exist for the Condition
**********************************************/
IF OBJECT_ID('tempdb..#SUMMARIZE_EVIDENCE', 'U') IS NOT NULL
	DROP TABLE #SUMMARIZE_EVIDENCE;

WITH CTE_FILTER_DATA_TO_UNIVERSE AS (
	SELECT e.*, 
		c.CONCEPT_ID AS DRUG_CONCEPT_ID, 
		c.CONCEPT_NAME AS DRUG_CONCEPT_NAME,
		cc.CONDITION_CONCEPT_ID, 
		cc.CONDITION_CONCEPT_NAME
	FROM @tableQualifier.DRUG_HOI_EVIDENCE e
		JOIN @tableQualifier.DRUG_HOI_RELATIONSHIP r
			ON r.ID = e.DRUG_HOI_RELATIONSHIP
			/*ROLL DOWN TO INGREDIENTS*/
		JOIN @tableQualifier.CONCEPT_ANCESTOR ca
			ON ca.DESCENDANT_CONCEPT_ID = r.DRUG
			AND ca.ANCESTOR_CONCEPT_ID IN (
				SELECT DISTINCT CONCEPT_ID
				FROM @tableQualifier.CONCEPT
				WHERE VOCABULARY_ID = 'RxNorm'
				AND CONCEPT_CLASS_ID = 'Ingredient'
				AND INVALID_REASON IS NULL
			)
		JOIN @tableQualifier.CONCEPT c
			ON c.CONCEPT_ID = ca.ANCESTOR_CONCEPT_ID
			AND c.CONCEPT_ID IN (
				/*KEEP TO DRUG UNIVERSE*/
				SELECT DISTINCT INGREDIENT_CONCEPT_ID FROM @tableQualifier.DRUG_UNIVERSE
			)
		JOIN @tableQualifier.LU_CONDITIONS_CHILDREN cc
			ON cc.CONCEPT_ID = r.HOI
			AND cc.CONDITION_CONCEPT_ID IN (
				/*KEEP TO CONDITION UNIVERSE*/
				SELECT DISTINCT CONDITION_CONCEPT_ID FROM @tableQualifier.CONDITION_UNIVERSE
			)
)
SELECT 
	0 @CONCEPT_DOMAIN_ID_CONCEPT_ID
	, CAST('@CONCEPT_SET_NAME' AS TEXT) @CONCEPT_DOMAIN_ID_CONCEPT_NAME
	, @TARGET_DOMAIN_ID_CONCEPT_ID
	, @TARGET_DOMAIN_ID_CONCEPT_NAME
	, EVIDENCE_TYPE
	, SUPPORTS
	, CASE 
		WHEN EVIDENCE_TYPE IN ('MEDLINE_MeSH_ClinTrial','MEDLINE_MeSH_CR','MEDLINE_MeSH_Other','MEDLINE_SemMedDB_ClinTrial','MEDLINE_SemMedDB_CR','MEDLINE_SemMedDB_Other','SPL_EU_SPC','SPL_SPLICER_ADR','aers_report_count') THEN SUM(STATISTIC_VALUE) 
		WHEN EVIDENCE_TYPE IN ('aers_report_prr') THEN EXP(AVG(LOG(STATISTIC_VALUE)))
		ELSE NULL
	END STATISTIC_VALUE
	--, STRING_AGG(EVIDENCE_LINKOUT, '|') AS EVIDENCE_LINKOUTS
INTO #SUMMARIZE_EVIDENCE
FROM CTE_FILTER_DATA_TO_UNIVERSE
WHERE @CONCEPT_DOMAIN_ID_CONCEPT_ID IN (
	SELECT COI_CONCEPT_ID FROM #CONCEPTS_OF_INTEREST
)
GROUP BY @TARGET_DOMAIN_ID_CONCEPT_ID, @TARGET_DOMAIN_ID_CONCEPT_NAME,EVIDENCE_TYPE, SUPPORTS
ORDER BY @TARGET_DOMAIN_ID_CONCEPT_ID, EVIDENCE_TYPE;

/*********************************************
Identify all Drugs and their Sister Drugs that Have Evidence
**********************************************/
IF OBJECT_ID('tempdb..#SUMMARY', 'U') IS NOT NULL
	DROP TABLE #SUMMARY;

WITH CTE_SUMMARIZE AS (
	SELECT DISTINCT 
                u.@TARGET_DOMAIN_ID_CONCEPT_ID, 
                u.@TARGET_DOMAIN_ID_CONCEPT_NAME, 
                u.DOMAIN_ID,
		MAX(CASE WHEN c1.STATISTIC_VALUE IS NULL THEN 0 ELSE c1.STATISTIC_VALUE END) AS MEDLINE_CT,
		MAX(CASE WHEN c2.STATISTIC_VALUE IS NULL THEN 0 ELSE c2.STATISTIC_VALUE END) AS MEDLINE_CASE,
		MAX(CASE WHEN c3.STATISTIC_VALUE IS NULL THEN 0 ELSE c3.STATISTIC_VALUE END) AS MEDLINE_OTHER,
		MAX(CASE WHEN c4.SUPPORTS='t' THEN 
			CASE WHEN c4.STATISTIC_VALUE IS NULL THEN 0 ELSE 1 END 
			ELSE 0 END) AS SEMMEDDB_CT_T,
		MAX(CASE WHEN c5.SUPPORTS='t' THEN 
			CASE WHEN c5.STATISTIC_VALUE IS NULL THEN 0 ELSE 1 END 
			ELSE 0 END) AS SEMMEDDB_CASE_T,
		MAX(CASE WHEN smo.SUPPORTS='t' THEN 
			CASE WHEN smo.STATISTIC_VALUE IS NULL THEN 0 ELSE 1 END 
			ELSE 0 END) AS SEMMEDDB_OTHER_T,
		MAX(CASE WHEN c4.SUPPORTS='f' THEN 
			CASE WHEN c4.STATISTIC_VALUE IS NULL THEN 0 ELSE 1 END 
			ELSE 0 END) AS SEMMEDDB_CT_F,
		MAX(CASE WHEN c5.SUPPORTS='f' THEN 
			CASE WHEN c5.STATISTIC_VALUE IS NULL THEN 0 ELSE 1 END 
			ELSE 0 END) AS SEMMEDDB_CASE_F,
		MAX(CASE WHEN smo.SUPPORTS='f' THEN 
			CASE WHEN smo.STATISTIC_VALUE IS NULL THEN 0 ELSE 1 END 
			ELSE 0 END) AS SEMMEDDB_OTHER_F,
		MAX(CASE WHEN coalesce(c6.STATISTIC_VALUE,0) > 0 THEN 1 ELSE 0 END) AS EU_SPC,
		MAX(CASE WHEN coalesce(c7.STATISTIC_VALUE,0) > 0 THEN 1 ELSE 0 END) AS SPL_ADR,
		MAX(CASE WHEN c8.STATISTIC_VALUE IS NULL THEN 0 ELSE c8.STATISTIC_VALUE END) AS AERS,
		MAX(CASE WHEN c9.STATISTIC_VALUE IS NULL THEN 0 ELSE c9.STATISTIC_VALUE END) AS AERS_PRR
	FROM #COMPLETE_UNIVERSE u
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c1
			ON c1.CONDITION_CONCEPT_ID = u.CONDITION_CONCEPT_ID 
			AND c1.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND c1.EVIDENCE_TYPE = 'MEDLINE_MeSH_ClinTrial'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c2
			ON c2.CONDITION_CONCEPT_ID = u.CONDITION_CONCEPT_ID 
			AND c2.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND c2.EVIDENCE_TYPE = 'MEDLINE_MeSH_CR'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c3
			ON c3.CONDITION_CONCEPT_ID = u.CONDITION_CONCEPT_ID 
			AND c3.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID
			AND c3.EVIDENCE_TYPE = 'MEDLINE_MeSH_Other'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c4
			ON c4.CONDITION_CONCEPT_ID = u.CONDITION_CONCEPT_ID 
			AND c4.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID
			AND c4.EVIDENCE_TYPE = 'MEDLINE_SemMedDB_ClinTrial'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c5
			ON c5.CONDITION_CONCEPT_ID = u.CONDITION_CONCEPT_ID 
			AND c5.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND c5.EVIDENCE_TYPE = 'MEDLINE_SemMedDB_CR'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE smo
			ON smo.CONDITION_CONCEPT_ID  = u.CONDITION_CONCEPT_ID 
			AND smo.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND smo.EVIDENCE_TYPE = 'MEDLINE_SemMedDB_Other'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c6
			ON c6.CONDITION_CONCEPT_ID  = u.CONDITION_CONCEPT_ID 
			AND c6.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND c6.EVIDENCE_TYPE = 'SPL_EU_SPC'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c7
			ON c7.CONDITION_CONCEPT_ID  = u.CONDITION_CONCEPT_ID 
			AND c7.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND c7.EVIDENCE_TYPE = 'SPL_SPLICER_ADR'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c8
			ON c8.CONDITION_CONCEPT_ID  = u.CONDITION_CONCEPT_ID 
			AND c8.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND c8.EVIDENCE_TYPE = 'aers_report_count'
		LEFT OUTER JOIN #SUMMARIZE_EVIDENCE c9
			ON c9.CONDITION_CONCEPT_ID  = u.CONDITION_CONCEPT_ID 
			AND c9.DRUG_CONCEPT_ID = u.DRUG_CONCEPT_ID 
			AND c9.EVIDENCE_TYPE = 'aers_report_prr'
	GROUP BY 
                u.@TARGET_DOMAIN_ID_CONCEPT_ID, 
                u.@TARGET_DOMAIN_ID_CONCEPT_NAME, 
                u.DOMAIN_ID
)
SELECT 
        s.@TARGET_DOMAIN_ID_CONCEPT_ID CONCEPT_ID, 
        s.@TARGET_DOMAIN_ID_CONCEPT_NAME CONCEPT_NAME, 
	s.DOMAIN_ID,
	CASE WHEN MEDLINE_CT IS NULL THEN 0 ELSE MEDLINE_CT END MEDLINE_CT, 
	CASE WHEN MEDLINE_CASE IS NULL THEN 0 ELSE MEDLINE_CASE END MEDLINE_CASE, 
	CASE WHEN MEDLINE_OTHER IS NULL THEN 0 ELSE MEDLINE_OTHER END MEDLINE_OTHER,
	CASE WHEN SEMMEDDB_CT_T IS NULL THEN 0 ELSE SEMMEDDB_CT_T END SEMMEDDB_CT_T, 
	CASE WHEN SEMMEDDB_CASE_T IS NULL THEN 0 ELSE SEMMEDDB_CASE_T END SEMMEDDB_CASE_T, 
	CASE WHEN SEMMEDDB_OTHER_T IS NULL THEN 0 ELSE SEMMEDDB_OTHER_T END SEMMEDDB_OTHER_T,
	CASE WHEN SEMMEDDB_CT_F IS NULL THEN 0 ELSE SEMMEDDB_CT_F END SEMMEDDB_CT_F, 
	CASE WHEN SEMMEDDB_CASE_F IS NULL THEN 0 ELSE SEMMEDDB_CASE_F END SEMMEDDB_CASE_F, 
	CASE WHEN SEMMEDDB_OTHER_F IS NULL THEN 0 ELSE SEMMEDDB_OTHER_F END SEMMEDDB_OTHER_F,
	CASE WHEN EU_SPC IS NULL THEN 0 ELSE EU_SPC END EU_SPC, 
	CASE WHEN SPL_ADR IS NULL THEN 0 ELSE SPL_ADR END SPL_ADR, 
	CASE WHEN AERS IS NULL THEN 0 ELSE AERS END AERS, 
	CASE WHEN AERS_PRR IS NULL THEN 0 ELSE AERS_PRR END AERS_PRR
INTO #SUMMARY
FROM #COMPLETE_UNIVERSE cu
FULL OUTER JOIN CTE_SUMMARIZE s ON s.@TARGET_DOMAIN_ID_CONCEPT_ID = cu.@TARGET_DOMAIN_ID_CONCEPT_ID
ORDER BY 
    s.@TARGET_DOMAIN_ID_CONCEPT_ID, 
    s.@TARGET_DOMAIN_ID_CONCEPT_NAME, 
    s.DOMAIN_ID;

-- Compute the standard deviation for the varaiables and keep this in a temp table
IF OBJECT_ID('tempdb..#SUMMARY_STDEV', 'U') IS NOT NULL
DROP TABLE #SUMMARY_STDEV;

select 
	STDEV(MEDLINE_CT) MEDLINE_CT_STDEV
	, STDEV(MEDLINE_CASE) MEDLINE_CASE_STDEV
	, STDEV(MEDLINE_OTHER) MEDLINE_OTHER_STDEV
	, STDEV(SEMMEDDB_CT_T) SEMMEDDB_CT_T_STDEV
	, STDEV(SEMMEDDB_CASE_T) SEMMEDDB_CASE_T_STDEV
	, STDEV(SEMMEDDB_OTHER_T) SEMMEDDB_OTHER_T_STDEV
	, STDEV(SEMMEDDB_CT_F) SEMMEDDB_CT_F_STDEV
	, STDEV(SEMMEDDB_CASE_F) SEMMEDDB_CASE_F_STDEV
	, STDEV(SEMMEDDB_OTHER_F) SEMMEDDB_OTHER_F_STDEV
	, STDEV(EU_SPC) EU_SPC_STDEV
	, STDEV(SPL_ADR) SPL_ADR_STDEV
	, STDEV(AERS) AERS_STDEV
	, STDEV(AERS_PRR) AERS_PRR_STDEV
INTO #SUMMARY_STDEV
from #SUMMARY;

-- Compute the scaled varaiables and keep this in a temp table
IF OBJECT_ID('tempdb..#SUMMARY_SCALED', 'U') IS NOT NULL
DROP TABLE #SUMMARY_SCALED;

-- Start to apply the model by dividing each variable by the standard deviation for each variable
select 
	CONCEPT_ID
	, CONCEPT_NAME
	, DOMAIN_ID
	, MEDLINE_CT
	, MEDLINE_CASE
	, MEDLINE_OTHER
	, SEMMEDDB_CT_T
	, SEMMEDDB_CASE_T
	, SEMMEDDB_OTHER_T
	, SEMMEDDB_CT_F
	, SEMMEDDB_CASE_F
	, SEMMEDDB_OTHER_F
	, EU_SPC
	, SPL_ADR
	, AERS
	, AERS_PRR
	, CASE WHEN MEDLINE_CT_STDEV = 0 THEN 0 ELSE (MEDLINE_CT / MEDLINE_CT_STDEV) END MEDLINE_CT_SCALED
	, CASE WHEN MEDLINE_CASE_STDEV = 0 THEN 0 ELSE (MEDLINE_CASE / MEDLINE_CASE_STDEV) END MEDLINE_CASE_SCALED
	, CASE WHEN MEDLINE_OTHER_STDEV = 0 THEN 0 ELSE (MEDLINE_OTHER / MEDLINE_OTHER_STDEV) END MEDLINE_OTHER_SCALED
	, CASE WHEN SEMMEDDB_CT_T_STDEV = 0 THEN 0 ELSE (SEMMEDDB_CT_T / SEMMEDDB_CT_T_STDEV) END SEMMEDDB_CT_T_SCALED
	, CASE WHEN SEMMEDDB_CASE_T_STDEV = 0 THEN 0 ELSE (SEMMEDDB_CASE_T / SEMMEDDB_CASE_T_STDEV) END SEMMEDDB_CASE_T_SCALED
	, CASE WHEN SEMMEDDB_OTHER_T_STDEV = 0 THEN 0 ELSE (SEMMEDDB_OTHER_T / SEMMEDDB_OTHER_T_STDEV) END SEMMEDDB_OTHER_T_SCALED
	, CASE WHEN SEMMEDDB_CT_F_STDEV = 0 THEN 0 ELSE (SEMMEDDB_CT_F / SEMMEDDB_CT_F_STDEV) END SEMMEDDB_CT_F_SCALED
	, CASE WHEN SEMMEDDB_CASE_F_STDEV = 0 THEN 0 ELSE (SEMMEDDB_CASE_F / SEMMEDDB_CASE_F_STDEV) END SEMMEDDB_CASE_F_SCALED
	, CASE WHEN SEMMEDDB_OTHER_F_STDEV = 0 THEN 0 ELSE (SEMMEDDB_OTHER_F / SEMMEDDB_OTHER_F_STDEV) END SEMMEDDB_OTHER_F_SCALED
	, CASE WHEN EU_SPC_STDEV = 0 THEN 0 ELSE (EU_SPC / EU_SPC_STDEV) END EU_SPC_SCALED
	, CASE WHEN SPL_ADR_STDEV = 0 THEN 0 ELSE (SPL_ADR / SPL_ADR_STDEV) END SPL_ADR_SCALED
	, CASE WHEN AERS_STDEV = 0 THEN 0 ELSE (AERS / AERS_STDEV) END AERS_SCALED 
	, CASE WHEN AERS_PRR_STDEV = 0 THEN 0 ELSE (AERS_PRR / AERS_PRR_STDEV) END AERS_PRR_SCALED
INTO #SUMMARY_SCALED
FROM #SUMMARY, #SUMMARY_STDEV;

-- Apply the model
IF OBJECT_ID('tempdb..#MODEL_APPLIED', 'U') IS NOT NULL
DROP TABLE #MODEL_APPLIED;

SELECT
        @CONCEPT_SET_ID CONCEPT_SET_ID
        , '@CONCEPT_SET_NAME' CONCEPT_SET_NAME
	, CONCEPT_ID
	, CONCEPT_NAME
	, DOMAIN_ID
	, MEDLINE_CT
	, MEDLINE_CASE
	, MEDLINE_OTHER
	, SEMMEDDB_CT_T
	, SEMMEDDB_CASE_T
	, SEMMEDDB_OTHER_T
	, SEMMEDDB_CT_F
	, SEMMEDDB_CASE_F
	, SEMMEDDB_OTHER_F
	, EU_SPC
	, SPL_ADR
	, AERS
	, AERS_PRR
	, MEDLINE_CT_SCALED  
	, b1.BETA "MEDLINE_CT_BETA"
	, MEDLINE_CASE_SCALED
	, b2.BETA "MEDLINE_CASE_BETA"
	, MEDLINE_OTHER_SCALED
	, b3.BETA "MEDLINE_OTHER_BETA"
	, SEMMEDDB_CT_T_SCALED
	, b4.BETA "SEMMEDDB_CT_T_BETA"
	, SEMMEDDB_CASE_T_SCALED
	, b5.BETA "SEMMEDDB_CASE_T_BETA"
	, SEMMEDDB_OTHER_T_SCALED
	, b3.BETA "SEMMEDDB_OTHER_T_BETA"
	, SEMMEDDB_CT_F_SCALED
	, b4.BETA "SEMMEDDB_CT_F_BETA"
	, SEMMEDDB_CASE_F_SCALED
	, b5.BETA "SEMMEDDB_CASE_F_BETA"
	, SEMMEDDB_OTHER_F_SCALED
	, b3.BETA "SEMMEDDB_OTHER_F_BETA"
	, EU_SPC_SCALED
	, b6.BETA "EU_SPC_Beta"
	, SPL_ADR_SCALED
	, b7.BETA "SPL_ADR_Beta"
	, AERS_SCALED
	, b8.BETA "AERS_Beta"
	, AERS_PRR_SCALED
	, b9.BETA "AERS_PRR_Beta"
	, ((MEDLINE_CT_SCALED * b1.BETA) + 
	   (MEDLINE_CASE_SCALED * b2.BETA) + 
	   (MEDLINE_OTHER_SCALED * b3.BETA) +
	   (SEMMEDDB_CT_T_SCALED * b4.BETA) +
	   (SEMMEDDB_CASE_T_SCALED * b5.BETA) +
	   (SEMMEDDB_OTHER_T_SCALED * b4.BETA) + 
	   --(SEMMEDDB_CT_F_SCALED * b4.BETA) + 
	   --(SEMMEDDB_CASE_F_SCALED * b5.BETA) +
	   --(SEMMEDDB_OTHER_F_SCALED * b3.BETA) +
	   (EU_SPC_SCALED * b6.BETA) +
	   (SPL_ADR_SCALED * b7.BETA) +
	   (AERS_SCALED * b8.BETA) +
	   (AERS_PRR_SCALED * b9.BETA)
	   ) + i.BETA RAW_Prediction
INTO #MODEL_APPLIED
FROM #SUMMARY_SCALED
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b1 ON b1.EVIDENCE_TYPE = 'MEDLINE_MeSH_ClinTrial'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b2 ON b2.EVIDENCE_TYPE = 'MEDLINE_MeSH_CR'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b3 ON b3.EVIDENCE_TYPE = 'MEDLINE_MeSH_Other'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b4 ON b4.EVIDENCE_TYPE = 'MEDLINE_SemMedDB_ClinTrial'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b5 ON b5.EVIDENCE_TYPE = 'MEDLINE_SemMedDB_CR'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b6 ON b6.EVIDENCE_TYPE = 'SPL_EU_SPC'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b7 ON b7.EVIDENCE_TYPE = 'SPL_SPLICER_ADR'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b8 ON b8.EVIDENCE_TYPE = 'aers_report_count'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS b9 ON b9.EVIDENCE_TYPE = 'aers_report_prr'
LEFT OUTER JOIN @tableQualifier.POSITIVE_NEGATIVE_CONTROL_BETAS i ON i.EVIDENCE_TYPE = 'intercept'

-- Provide the results and compute the predictive value
SELECT
        @SOURCE_ID SOURCE_ID
        , CONCEPT_SET_ID
        , CONCEPT_SET_NAME
	, CONCEPT_ID
	, CONCEPT_NAME
	, DOMAIN_ID
	, MEDLINE_CT
	, MEDLINE_CASE
	, MEDLINE_OTHER
	, SEMMEDDB_CT_T
	, SEMMEDDB_CASE_T
	, SEMMEDDB_OTHER_T
	, SEMMEDDB_CT_F
	, SEMMEDDB_CASE_F
	, SEMMEDDB_OTHER_F
	, EU_SPC
	, SPL_ADR
	, AERS
	, AERS_PRR
	, MEDLINE_CT_SCALED  
	, MEDLINE_CT_BETA
	, MEDLINE_CASE_SCALED
	, MEDLINE_CASE_BETA
	, MEDLINE_OTHER_SCALED
	, MEDLINE_OTHER_BETA
	, SEMMEDDB_CT_T_SCALED
	, SEMMEDDB_CT_T_BETA
	, SEMMEDDB_CASE_T_SCALED
	, SEMMEDDB_CASE_T_BETA
	, SEMMEDDB_OTHER_T_SCALED
	, SEMMEDDB_OTHER_T_BETA
	, SEMMEDDB_CT_F_SCALED
	, SEMMEDDB_CT_F_BETA
	, SEMMEDDB_CASE_F_SCALED
	, SEMMEDDB_CASE_F_BETA
	, SEMMEDDB_OTHER_F_SCALED
	, SEMMEDDB_OTHER_F_BETA
	, EU_SPC_SCALED
	, EU_SPC_Beta
	, SPL_ADR_SCALED
	, SPL_ADR_Beta
	, AERS_SCALED
	, AERS_Beta
	, AERS_PRR_SCALED
	, AERS_PRR_Beta
	, RAW_Prediction
        , EXP(RAW_Prediction)/(1 + EXP(RAW_Prediction)) Prediction
FROM #MODEL_APPLIED
;